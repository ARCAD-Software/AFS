/*******************************************************************************
 * Copyright (c) 2025 ARCAD Software.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     ARCAD Software - initial API and implementation
 *******************************************************************************/
package com.arcadsoftware.rest;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;

import org.restlet.data.CharacterSet;
import org.restlet.data.Disposition;
import org.restlet.data.Language;
import org.restlet.data.MediaType;
import org.restlet.representation.StringRepresentation;

/**
 * Helper String representation used in conjunction with the XStream XML serializer.
 * 
 * This representation accept a xml string generated by XStream. the correct mime type
 * and the xml declaration tag are added to the string.
 *    
 */
public class XMLRepresentation extends StringRepresentation {

	private static final String ENCODING = "encoding=\""; //$NON-NLS-1$

	/**
	 * Create a transient representation from an Xml file.
	 * 
	 * @param file
	 * @param language
	 * @return
	 */
	public static XMLRepresentation fromFile(File file, Language language) {
		return fromFile(file, MediaType.APPLICATION_XML, language);
	}

	/**
	 * Create a transient representation from an Xml file.
	 * 
	 * @param file
	 * @return
	 */
	public static XMLRepresentation fromFile(File file) {
		return fromFile(file, MediaType.APPLICATION_XML, Language.ENGLISH);
	}

	/**
	 * Create a transient representation from an Xml file.
	 * 
	 * @param file
	 * @param mediaType
	 * @return
	 */
	public static XMLRepresentation fromFile(File file, MediaType mediaType) {
		return fromFile(file, mediaType, Language.ENGLISH);
	}
	
	/**
	 * Create a transient representation from an Xml file.
	 * 
	 * @param file
	 * @param mediaType
	 * @param language
	 * @return
	 */
	public static XMLRepresentation fromFile(File file, MediaType mediaType, Language language) {
		CharacterSet cs = CharacterSet.UTF_8;
		StringBuilder sb = new StringBuilder();
		// Récupération de l'encodage du fichier xml...
		FileInputStream fip;
		try {
			fip = new FileInputStream(file);
			try {
				byte[] buffer = new byte[1024]; // more than needed
				int x = fip.read(buffer);
				String s = new String(buffer, 0, x);
				x = s.indexOf(ENCODING);
				sb.append(s);
				if (x != -1) {
					x += ENCODING.length();
					s = s.substring(x, s.indexOf('"', x));
					cs = CharacterSet.valueOf(s);
				}
				while ((x = fip.read(buffer)) != -1) {
					sb.append(new String(buffer, 0, x));
				}
			} catch (IOException e) {
			} finally {
				try {
					fip.close();
				} catch (IOException e) {
				}
			}
		} catch (FileNotFoundException e) {
			return null;
		}
		XMLRepresentation result = new XMLRepresentation(sb.toString() , mediaType, language, cs);
		result.setModificationDate(new Date(file.lastModified()));
		Disposition disposition = new Disposition(Disposition.TYPE_ATTACHMENT);
		disposition.setFilename(file.getName());
		result.setDisposition(disposition);
		return result;
	}
	
	/**
	 * Create a correct Application/xml representation.
	 * 
	 * Encoded with UTF-8 and with English language. 
	 * 
	 * @param text the xml string.
	 */
	public XMLRepresentation(CharSequence text) {
		this(text, Language.ENGLISH);
	}

	/**
	 * 
	 * @param text the xml string.
	 * @param date
	 */
	public XMLRepresentation(CharSequence text, Date date) {
		this(text, Language.ENGLISH);
		setModificationDate(date);
	}

	/**
	 * Create a correct Application/xml representation, encoded with UTF-8.
	 * 
	 * @param text the xml string.
	 * @param language the desired Language
	 */
	public XMLRepresentation(CharSequence text, Language language) {
		this(text, MediaType.APPLICATION_XML, language);
	}

	/**
	 * Create a correct Application/xml representation, encoded with UTF-8.
	 * 
	 * @param text
	 * @param language
	 * @param date
	 */
	public XMLRepresentation(CharSequence text, Language language, Date date) {
		this(text, MediaType.APPLICATION_XML, language);
		setModificationDate(date);
	}

	/**
	 * Create a specific representation encoded with UTF-8, used language is English.
	 * 
	 * @param text the xml string.
	 * @param mediaType the desired mime-type
	 */
	public XMLRepresentation(CharSequence text, MediaType mediaType) {
		this(text, mediaType, Language.ENGLISH);
	}

	/**
	 * Create a specific representation encoded with UTF-8.
	 * 
	 * @param text the xml string.
	 * @param mediaType the desired mime-type
	 * @param language the desired Language
	 */
	public XMLRepresentation(CharSequence text, MediaType mediaType, Language language) {
		super("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + text, mediaType, language, CharacterSet.UTF_8); //$NON-NLS-1$
	}

    /**
     * Constructor.
     * 
     * @param text
     *            The string value.
     * @param mediaType
     *            The media type.
     * @param language
     *            The language.
     * @param characterSet
     *            The character set.
     */
	protected XMLRepresentation(CharSequence text, MediaType mediaType, Language language, CharacterSet characterSet) {
		super(text, mediaType, language, characterSet); //$NON-NLS-1$
	}

}
