
bl.bundlenotstarted  = The Bundle %s, version %s, can not be started. Reason: %s.
bl.bundlenotststoped = The Bundle %s, version %s, can not be stopped. Reason: %s.
bl.bundlestarted     = The Bundle %s, version %s, is now started.
bl.bundlestoped      = The Bundle %s, version %s, is now stopped.
bl.category          = Administration
bl.contact           = Contact address
bl.copyright         = Copyright
bl.date              = Last modification
bl.description       = Description
bl.help              = This section list installed Bundles. You can manually Start stopped Bundles, or Stop and Refresh started ones. 
bl.info              = Information
bl.info.help         = Get information about seleted Bundle.
bl.label             = Installed Bundles
bl.location          = Location
bl.moreinfo          = More information
bl.name              = Name
bl.notready          = Platform not ready to execute this command (PackageAdmin not started).
bl.refresh           = Refresh
bl.refresh.help      = Refresh import packages of a started Bundle.
bl.refreshed         = Bundles refreshed.
bl.start             = Start
bl.start.help        = Start a stopped Bundle.
bl.started           = %d Bundles started
bl.stop              = Stop
bl.stop.help         = Stop a started Bundle.
bl.stoped            = %d Bundles stopped
bl.text              = This platform possess %d installed Bundles.
bl.vendor            = Vendor
bl.version           = Version

config.list = Server Configurations list:

console.misc  = Misc.
console.title = ARCAD Administration Console

error = Error

error.confaccess    = Error while accessing configuration:
error.confrec       = Error during configuration parameters recording.
error.invalidaction = Invalid action name.
error.noconfservice = Configuration Admin Service not ready.
error.noright       = Access rights not granted to current user.

info.confsuccess = Configuration parameters successfully recorded.
info.noresult    = Empty result returned.
info.success     = Operation successfully performed.

label.close   = Close
label.error   = Error
label.save    = Save
label.success = Success

wrapper.app.account           = Application Account
wrapper.app.account.help      = The application account is equivalent to Posix sudo or windows runas. Note for Posix systems: Define a account with [group]\\[user] (use \\\\ in configuration file). If no group is configured default group of the user is used
wrapper.app.password          = Account password
wrapper.app.password.help     = Account password corresponding to the application account user.
wrapper.category              = Administration 
wrapper.error                 = Error 
wrapper.error.file            = Error while writing the new parameters to the file system. Consult the server log for details.
wrapper.error.noprops         = The Service/Deamon Wrapper parameters are not accessible to this configuration.
wrapper.help                  = These are the parameters of the Service/Deamon Wrapper. This program control the execution of this server. After any modification to these parameters you will need to restart the Service or the Deamon onto the Server host. 
wrapper.java.initmemory       = Initial Java Heap Size (in MB)
wrapper.java.initmemory.help  = Memory heap size used by the Java Virtual Machine at startup (in Mega Bytes).
wrapper.java.maxmemory        = Maximum Java Heap Size (in MB)
wrapper.java.maxmemory.help   = Mawimal memory heap size used by the Java Virtual Machine (in Mega Bytes).
wrapper.jmx                   = Enable wrapper JMX
wrapper.jmx.help              = Activate the connectivity with JMX to the wrapper process.\nFor instance, connect using JConsole per remote access using the URL: service:jmx:rmi:///jndi/rmi://localhost:1099/server\n
wrapper.jmx.rmi.password      = Password
wrapper.jmx.rmi.password.help = Password used to connect with JMX RMI.
wrapper.jmx.rmi.port          = JMX access port
wrapper.jmx.rmi.port.help     = Define the JMX RMI access port. Default is 1099.
wrapper.jmx.rmi.user          = JMX RMI credentials
wrapper.jmx.rmi.user.help     = Login used to access to the server with JMX RMI connection.
wrapper.label                 = Service/Deamon Wrapper
wrapper.logfile.format        = Log format
wrapper.logfile.format.help   = Format of output for the console. \n\nThe format consists of the tokens 'L' for log level, 'P' for prefix, 'D' for thread, 'T' for time, 'Z' for millisecond time, and 'M' for message. If the format contains these values then it will be included in the format. The order of the tokens does not affect the way the log appears, but the 'M' token should usually be placed last as it is the only column without a uniform width. Setting the parameter to a blank value will cause console output to be disabled.
wrapper.logfile.loglevel      = Log Level
wrapper.logfile.loglevel.help = Define the type of messages that will be stored into the log file.\n\nValid log levels include: NONE for no output, FATAL to only show fatal error messages, ERROR to show all error messages, STATUS to show all state changes, INFO shows all JVM output and informative messages, and DEBUG shows detailed debug information. The default value is INFO.
wrapper.logfile.maxfiles      = Maximum rolled files
wrapper.logfile.maxfiles.help = Maximum number of rolled log files which will be allowed before old files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxsize       = Maxium size
wrapper.logfile.maxsize.help  = \ Maximum size that the log file will be allowed to grow to before  the log is rolled. Size is specified in bytes.  The default value  of 0, disables log rolling by size.  May abbreviate with the 'k' (kB) or  'm' (mB) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.rollmode      = Roll Mode
wrapper.logfile.rollmode.help = Controls the roll mode of the log file. Possible values include:\n\nJVM - The log file will be rolled on Wrapper startup as with the WRAPPER mode. But it will also be rolled just before any restarted JVMs are launched. The log files will not have a maximum size and will continue to grow until the Wrapper or a JVM is restarted.\n\nDATE - As each log entry is logged to a file, its timestamp is compared with a YYYYMMDD formatted token in the current log file. Whenever this date changes a new log file will be opened. This has the benefit of grouping all log entries for a given day in a specific file. A file will not be created on days which do not have any log output.
wrapper.ping.timeout          = Ping timeout
wrapper.ping.timeout.help     = Number of seconds the wrapper waits for a ping message from the java application. If no heart beat is received within a timeout the wrapper assumes that the application is non responsive and will restart it. Default: 30 seconds\n
wrapper.priority              = Process priority
wrapper.priority.help         = Define the Service/Deamon process execution priority.
wrapper.save                  = Save
wrapper.save.help             = Record the modification onto the server configuration directory. The changes will be apply when the server will be restarted.
wrapper.save.message          = Settings have been successfully saved. To take the new values into account, restart the Service or the Deamon.
wrapper.save.title            = The new parameters are recorded
wrapper.set.application       = Application parameters
wrapper.set.jmx               = JMX console access
wrapper.set.log               = Logging parameters
wrapper.set.service           = Service parameters
wrapper.shutdown.timeout      = Shutdown Timeout
wrapper.shutdown.timeout.help = Number of seconds to allow between the time that the Wrapper asks the application to shutdown and the time that the JVM shuts down. Default: 30 seconds\n
wrapper.startup.timeout       = Startup Timeout
wrapper.startup.timeout.help  = Number of seconds to allow between the time that the Wrapper starts the application and the  application logon to the wrapper. Default: 30 seconds.\n
